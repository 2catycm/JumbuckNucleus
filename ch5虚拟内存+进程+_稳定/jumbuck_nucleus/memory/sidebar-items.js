initSidebarItems({"fn":[["alloc_one_frame","allocate a frame 接口暴露：本模块外的接口允许调用alloc方法，但是不允许调用dealloc。因为使用[`FrameBlockTracker`]来管理生命周期。"],["init","initiate heap allocator, frame allocator and kernel space"],["remap_test","检查页表是否正确运行。"],["test_frame_allocator","物理页帧 分配器 性能测试。"],["test_heap","测试堆分配器是否正确工作"],["test_panic_when_heap_space_not_enough","通过堆上使用过多内存，让系统奔溃"],["translated_byte_buffer","translate a pointer to a mutable u8 Vec through page table"],["translated_refmut","translate a generic through page table and return a mutable reference"],["translated_str","translate a pointer to a mutable u8 Vec end with `\\0` through page table to a `String`"]],"mod":[["address","Implementation of physical and virtual address and page number."],["frame_allocator","Implementation of [`FrameAllocator`] which controls all the frames in the operating system."],["heap_allocator","The global allocator"],["memory_set","Implementation of [`MapArea`] and [`MemorySet`]."],["page_table","Implementation of [`PageTableEntry`] and [`PageTable`]."]],"struct":[["FrameBlockTracker","manage a frame which has the same lifecycle as the tracker"],["KERNEL_SPACE","a memory set instance through lazy_static! managing kernel space"],["MapPermission","map permission corresponding to that in pte: `R W X U`"],["MemorySet","memory set structure, controls virtual-memory space"],["PageTableEntry","page table entry structure"],["PhysAddr","physical address 物理地址的抽象表示，为了安全的类型检查"],["PhysPageNum","physical page number"],["VirtAddr","virtual address"],["VirtPageNum","virtual page number"]]});